#!/usr/bin/env node
'use strict';

require('./babel-maybefill');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _configParser = require('./config-parser');

var _forAllFiles = require('./for-all-files');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

process.on('unhandledRejection', function (e) {
  d(e.message || e);
  d(e.stack || '');
});

process.on('uncaughtException', function (e) {
  d(e.message || e);
  d(e.stack || '');
});

var main = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(appDir, sourceDirs) {
    var compilerHost, rootCacheDir;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            compilerHost = null;
            rootCacheDir = _path2.default.join(appDir, '.cache');

            _mkdirp2.default.sync(rootCacheDir);

            if (process.env.NODE_ENV !== 'production') {
              console.log('Using NODE_ENV = ' + (process.env.NODE_ENV || 'development'));
            }

            d('main: ' + appDir + ', ' + JSON.stringify(sourceDirs));
            _context2.prev = 5;
            _context2.next = 8;
            return (0, _configParser.createCompilerHostFromProjectRoot)(appDir, rootCacheDir);

          case 8:
            compilerHost = _context2.sent;
            _context2.next = 16;
            break;

          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2['catch'](5);

            console.error('Couldn\'t set up compilers: ' + _context2.t0.message);
            d(_context2.t0.stack);

            throw _context2.t0;

          case 16:
            _context2.next = 18;
            return Promise.all(_lodash2.default.map(sourceDirs, function (dir) {
              return (0, _forAllFiles.forAllFiles)(dir, function () {
                var _this = this;

                var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(f) {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;

                          d('Starting compilation for ' + f);
                          _context.next = 4;
                          return compilerHost.compile(f);

                        case 4:
                          _context.next = 11;
                          break;

                        case 6:
                          _context.prev = 6;
                          _context.t0 = _context['catch'](0);

                          console.error('Failed to compile file: ' + f);
                          console.error(_context.t0.message);

                          d(_context.t0.stack);

                        case 11:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, _this, [[0, 6]]);
                }));

                return function (_x3) {
                  return ref.apply(this, arguments);
                };
              }());
            }));

          case 18:

            d('Saving out configuration');
            _context2.next = 21;
            return compilerHost.saveConfiguration();

          case 21:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[5, 11]]);
  }));

  return function main(_x, _x2) {
    return ref.apply(this, arguments);
  };
}();

var d = require('debug')('electron-compile');

var yargs = require('yargs').usage('Usage: electron-compile --appdir [root-app-dir] paths...').alias('a', 'appdir').describe('a', 'The top-level application directory (i.e. where your package.json is)').help('h').alias('h', 'help').epilog('Copyright 2015');

var argv = yargs.argv;

if (!argv._ || argv._.length < 1) {
  yargs.showHelp();
  process.exit(-1);
}

var sourceDirs = argv._;
var appDir = argv.a || process.env.PWD;

main(appDir, sourceDirs).then(function () {
  return process.exit(0);
}).catch(function (e) {
  console.error(e.message || e);
  d(e.stack);

  console.error("Compilation failed!\nFor extra information, set the DEBUG environment variable to '*'");
  process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,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QVEsS0FBUixDQUFjLHVGQUFkLEVBSlk7QUFLWixVQUFRLElBQVIsQ0FBYSxDQUFDLENBQUQsQ0FBYixDQUxZO0NBQVAsQ0FGVCIsImZpbGUiOiJjbGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0ICcuL2JhYmVsLW1heWJlZmlsbCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBta2RpcnAgZnJvbSAnbWtkaXJwJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7Y3JlYXRlQ29tcGlsZXJIb3N0RnJvbVByb2plY3RSb290fSBmcm9tICcuL2NvbmZpZy1wYXJzZXInO1xuaW1wb3J0IHtmb3JBbGxGaWxlc30gZnJvbSAnLi9mb3ItYWxsLWZpbGVzJztcblxucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgKGUpID0+IHtcbiAgZChlLm1lc3NhZ2UgfHwgZSk7XG4gIGQoZS5zdGFjayB8fCAnJyk7XG59KTtcblxucHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZSkgPT4ge1xuICBkKGUubWVzc2FnZSB8fCBlKTtcbiAgZChlLnN0YWNrIHx8ICcnKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKGFwcERpciwgc291cmNlRGlycykge1xuICBsZXQgY29tcGlsZXJIb3N0ID0gbnVsbDtcbiAgbGV0IHJvb3RDYWNoZURpciA9IHBhdGguam9pbihhcHBEaXIsICcuY2FjaGUnKTtcbiAgbWtkaXJwLnN5bmMocm9vdENhY2hlRGlyKTtcbiAgXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5sb2coYFVzaW5nIE5PREVfRU5WID0gJHtwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnfWApO1xuICB9XG4gIFxuICBkKGBtYWluOiAke2FwcERpcn0sICR7SlNPTi5zdHJpbmdpZnkoc291cmNlRGlycyl9YCk7XG4gIHRyeSB7XG4gICAgY29tcGlsZXJIb3N0ID0gYXdhaXQgY3JlYXRlQ29tcGlsZXJIb3N0RnJvbVByb2plY3RSb290KGFwcERpciwgcm9vdENhY2hlRGlyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkbid0IHNldCB1cCBjb21waWxlcnM6ICR7ZS5tZXNzYWdlfWApO1xuICAgIGQoZS5zdGFjayk7XG5cbiAgICB0aHJvdyBlO1xuICB9XG4gIFxuICBhd2FpdCBQcm9taXNlLmFsbChfLm1hcChzb3VyY2VEaXJzLCAoZGlyKSA9PiBmb3JBbGxGaWxlcyhkaXIsIGFzeW5jIChmKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGQoYFN0YXJ0aW5nIGNvbXBpbGF0aW9uIGZvciAke2Z9YCk7XG4gICAgICBhd2FpdCBjb21waWxlckhvc3QuY29tcGlsZShmKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY29tcGlsZSBmaWxlOiAke2Z9YCk7XG4gICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7XG5cbiAgICAgIGQoZS5zdGFjayk7XG4gICAgfVxuICB9KSkpO1xuICBcbiAgZCgnU2F2aW5nIG91dCBjb25maWd1cmF0aW9uJyk7XG4gIGF3YWl0IGNvbXBpbGVySG9zdC5zYXZlQ29uZmlndXJhdGlvbigpO1xufVxuXG5jb25zdCBkID0gcmVxdWlyZSgnZGVidWcnKSgnZWxlY3Ryb24tY29tcGlsZScpO1xuXG5jb25zdCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJylcbiAgLnVzYWdlKCdVc2FnZTogZWxlY3Ryb24tY29tcGlsZSAtLWFwcGRpciBbcm9vdC1hcHAtZGlyXSBwYXRocy4uLicpXG4gIC5hbGlhcygnYScsICdhcHBkaXInKVxuICAuZGVzY3JpYmUoJ2EnLCAnVGhlIHRvcC1sZXZlbCBhcHBsaWNhdGlvbiBkaXJlY3RvcnkgKGkuZS4gd2hlcmUgeW91ciBwYWNrYWdlLmpzb24gaXMpJylcbiAgLmhlbHAoJ2gnKVxuICAuYWxpYXMoJ2gnLCAnaGVscCcpXG4gIC5lcGlsb2coJ0NvcHlyaWdodCAyMDE1Jyk7XG5cbmNvbnN0IGFyZ3YgPSB5YXJncy5hcmd2O1xuXG5pZiAoIWFyZ3YuXyB8fCBhcmd2Ll8ubGVuZ3RoIDwgMSkge1xuICB5YXJncy5zaG93SGVscCgpO1xuICBwcm9jZXNzLmV4aXQoLTEpO1xufVxuXG5jb25zdCBzb3VyY2VEaXJzID0gYXJndi5fO1xuY29uc3QgYXBwRGlyID0gYXJndi5hIHx8IHByb2Nlc3MuZW52LlBXRDtcblxubWFpbihhcHBEaXIsIHNvdXJjZURpcnMpXG4gIC50aGVuKCgpID0+IHByb2Nlc3MuZXhpdCgwKSlcbiAgLmNhdGNoKChlKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UgfHwgZSk7XG4gICAgZChlLnN0YWNrKTtcbiAgICBcbiAgICBjb25zb2xlLmVycm9yKFwiQ29tcGlsYXRpb24gZmFpbGVkIVxcbkZvciBleHRyYSBpbmZvcm1hdGlvbiwgc2V0IHRoZSBERUJVRyBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byAnKidcIik7XG4gICAgcHJvY2Vzcy5leGl0KC0xKTtcbiAgfSk7ICBcbiJdfQ==